import sqlite3
import random
from datetime import datetime
from telegram.ext import Updater, CommandHandler, CallbackContext
from telegram import Update
import os

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
MINING_COST = 3000  # –¶–µ–Ω–∞ —Ñ–µ—Ä–º—ã
MINING_INCOME = 35  # –î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å
MAX_MINING_RIGS = 5  # –ú–∞–∫—Å–∏–º—É–º —Ñ–µ—Ä–º
BITCOIN_PRICE = 30000  # –¶–µ–Ω–∞ BTC
SHARE_PRICES = {
    "Tesla": 250,
    "AMD": 150,
    "NVIDIA": 300,
    "Bitcoin Mining Inc": 500,
    "BlockDAG Network": 100,
    "Solana Foundation": 400
}

# === –ö–≤–µ—Å—Ç—ã ===
QUESTS = [
    {
        "name": "–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª",
        "description": "–ü–æ–ª—É—á–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å $5000",
        "condition": lambda p: p["balance"] >= 5000,
        "reward": 1000
    },
    {
        "name": "–ü–µ—Ä–≤—ã–µ —Ñ–µ—Ä–º—ã",
        "description": "–ö—É–ø–∏—Ç–µ 2 –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã",
        "condition": lambda p: p["mining_rigs"] >= 2,
        "reward": 500
    },
    {
        "name": "–ò–Ω–≤–µ—Å—Ç–æ—Ä Tesla",
        "description": "–ö—É–ø–∏—Ç–µ 5 –∞–∫—Ü–∏–π Tesla",
        "condition": lambda p: p["shares"].get("Tesla", 0) >= 5,
        "reward": 300
    },
    {
        "name": "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π",
        "description": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 3 –¥—Ä—É–∑–µ–π",
        "condition": lambda p: get_referral_count(p["user_id"]) >= 3,
        "reward": 1500
    },
    {
        "name": "–ë–ª–æ–∫—á–µ–π–Ω-–º–∞–≥–Ω–∞—Ç",
        "description": "–ö—É–ø–∏—Ç–µ 3 –∞–∫—Ü–∏–∏ BlockDAG Network",
        "condition": lambda p: p["shares"].get("BlockDAG Network", 0) >= 3,
        "reward": 800
    },
    {
        "name": "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞",
        "description": "–ö—É–ø–∏—Ç–µ 5 –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º",
        "condition": lambda p: p["mining_rigs"] >= 5,
        "reward": 2000
    }
]

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    conn = sqlite3.connect('crypto_tycoon.db')
    c = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä–æ–∫–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS players
                 (user_id INTEGER PRIMARY KEY, 
                  balance REAL, 
                  mining_rigs INTEGER,
                  bitcoin_balance REAL,
                  day INTEGER,
                  quest_progress INTEGER,
                  ref_code TEXT)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ü–∏–π
    for company in SHARE_PRICES:
        c.execute(f'''CREATE TABLE IF NOT EXISTS {company.lower().replace(" ", "_")}
                   (user_id INTEGER PRIMARY KEY, amount INTEGER)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS referrals
                (referrer_id INTEGER, referred_id INTEGER)''')
    
    conn.commit()
    conn.close()

# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ===
def generate_ref_code():
    return str(uuid.uuid4())[:8]

def get_player(user_id):
    conn = sqlite3.connect('crypto_tycoon.db')
    c = conn.cursor()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    c.execute("SELECT * FROM players WHERE user_id=?", (user_id,))
    data = c.fetchone()
    
    if not data:
        return None
        
    player = {
        "user_id": data[0],
        "balance": data[1],
        "mining_rigs": data[2],
        "bitcoin_balance": data[3],
        "day": data[4],
        "quest_progress": data[5],
        "ref_code": data[6],
        "shares": {}
    }
    
    # –ê–∫—Ü–∏–∏
    for company in SHARE_PRICES:
        c.execute(f"SELECT amount FROM shares_{company.lower().replace(' ', '_')} WHERE user_id=?", (user_id,))
        share_data = c.fetchone()
        player["shares"][company] = share_data[0] if share_data else 0
    
    conn.close()
    return player

def save_player(player):
    conn = sqlite3.connect('crypto_tycoon.db')
    c = conn.cursor()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    c.execute("""INSERT OR REPLACE INTO players 
                 (user_id, balance, mining_rigs, bitcoin_balance, day, quest_progress, ref_code)
                 VALUES (?, ?, ?, ?, ?, ?, ?)""",
              (player["user_id"],
               player["balance"],
               player["mining_rigs"],
               player["bitcoin_balance"],
               player["day"],
               player["quest_progress"],
               player["ref_code"]))
    
    # –ê–∫—Ü–∏–∏
    for company, amount in player["shares"].items():
        table_name = f"shares_{company.lower().replace(' ', '_')}"
        c.execute(f"CREATE TABLE IF NOT EXISTS {table_name} (user_id INTEGER PRIMARY KEY, amount INTEGER)")
        c.execute(f"INSERT OR REPLACE INTO {table_name} (user_id, amount) VALUES (?, ?)",
                 (player["user_id"], amount))
    
    conn.commit()
    conn.close()

# === –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ===
def get_referral_count(user_id):
    conn = sqlite3.connect('crypto_tycoon.db')
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM referrals WHERE referrer_id=?", (user_id,))
    count = c.fetchone()[0]
    conn.close()
    return count

# === –ö–≤–µ—Å—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ ===
def check_quests(player):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤"""
    if player["quest_progress"] < len(QUESTS):
        return QUESTS[player["quest_progress"]]["condition"](player)
    return False

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if context.args and len(context.args) > 0:
        referrer_id = context.args[0]
        conn = sqlite3.connect('crypto_tycoon.db')
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO referrals (referrer_id, referred_id) VALUES (?, ?)",
                 (referrer_id, user_id))
        conn.commit()
        conn.close()
        
        context.bot.send_message(
            chat_id=referrer_id,
            text="üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ $500 –±–æ–Ω—É—Å–∞!"
        )
    
    player = get_player(user_id)
    if not player:
        player = {
            "user_id": user_id,
            "balance": 5000,
            "mining_rigs": 0,
            "bitcoin_balance": 0,
            "day": 1,
            "quest_progress": 0,
            "ref_code": generate_ref_code(),
            "shares": {company: 0 for company in SHARE_PRICES}
        }
        save_player(player)
        update.message.reply_text(
            "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Tycoon!\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–µ—Å—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quest –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏—è"
        )
    else:
        update.message.reply_text("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quest –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏–π")

def next_day(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    player = get_player(user_id)
    
    if not player:
        return
    
    current_quest = QUESTS[player["quest_progress"]]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
    if not current_quest["condition"](player):
        update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ!")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–≤–µ—Å—Ç
    player["balance"] += current_quest["reward"]
    player["quest_progress"] += 1
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Ö–æ–¥–∞
    income = player["mining_rigs"] * MINING_INCOME
    player["balance"] += income
    player["day"] += 1
    
    update_prices()
    save_player(player)
    
    update.message.reply_text(
        f"üìÖ –î–µ–Ω—å {player['day']}\n"
        f"‚úî –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ: {current_quest['name']}! –ü–æ–ª—É—á–µ–Ω–æ: ${current_quest['reward']}\n"
        f"‚õè –ú–∞–π–Ω–∏–Ω–≥ –ø—Ä–∏–Ω–µ—Å ${income}\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${player['balance']}"
    )

def update_prices():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—ã –Ω–∞ –∞–∫—Ü–∏–∏"""
    date = datetime.now().strftime("%Y-%m-%d")
    
    for company in SHARE_PRICES:
        change = random.uniform(-0.2, 0.3)
        new_price = max(50, int(SHARE_PRICES[company] * (1 + change)))
        SHARE_PRICES[company] = new_price
        
        conn = sqlite3.connect('crypto_tycoon.db')
        c = conn.cursor()
        table_name = f"{company.lower().replace(' ', '_')}_history"
        c.execute(f"CREATE TABLE IF NOT EXISTS {table_name} (date TEXT, price REAL)")
        c.execute(f"INSERT INTO {table_name} (date, price) VALUES (?, ?)", (date, new_price))
        conn.commit()
        conn.close()

def info(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    player = get_player(user_id)
    
    if not player:
        return
    
    income = player["mining_rigs"] * MINING_INCOME
    stock_value = sum(
        count * SHARE_PRICES[company] 
        for company, count in player["shares"].items()
    )
    
    shares_info = "\n".join(
        f"{company}: {count} –∞–∫—Ü–∏–π (${SHARE_PRICES[company]}/—à—Ç)" 
        for company, count in player["shares"].items() if count > 0
    )
    
    update.message.reply_text(
        f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:\n"
        f"–î–µ–Ω—å: {player['day']}\n"
        f"–ë–∞–ª–∞–Ω—Å: ${player['balance']}\n"
        f"–ú–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã: {player['mining_rigs']} —à—Ç\n"
        f"–î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: ${income}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–æ–≤: ${stock_value}"
    )

def buy_rig(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    player = get_player(user_id)
    
    if not player or len(context.args) != 1:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /buy_rig [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
        return
    
    try:
        count = int(context.args[0])
        cost = MINING_COST * count
        
        if player["mining_rigs"] + count > MAX_MINING_RIGS:
            update.message.reply_text(f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_MINING_RIGS} —Ñ–µ—Ä–º")
            return
            
        if player["balance"] >= cost:
            player["balance"] -= cost
            player["mining_rigs"] += count
            save_player(player)
            update.message.reply_text(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {count} –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º –∑–∞ ${cost}")
        else:
            update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
    except:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /buy_rig [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")

def buy_share(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    player = get_player(user_id)
    
    if not player or len(context.args) != 2:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /buy_share [–∫–æ–º–ø–∞–Ω–∏—è] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
        return
    
    company, count = context.args[0], int(context.args[1])
    if company not in SHARE_PRICES:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
        return
        
    price = SHARE_PRICES[company] * count
    if player["balance"] >= price:
        player["balance"] -= price
        player["shares"][company] += count
        save_player(player)
        update.message.reply_text(f"üìà –ö—É–ø–ª–µ–Ω–æ {count} –∞–∫—Ü–∏–π {company} –∑–∞ ${price}")
    else:
        update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")

def sell_share(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    player = get_player(user_id)
    
    if not player or len(context.args) != 2:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /sell_share [–∫–æ–º–ø–∞–Ω–∏—è] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
        return
    
    company, count = context.args[0], int(context.args[1])
    if company not in SHARE_PRICES:
        update.message.reply_text("‚ùå –ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏")
        return
        
    if player["shares"].get(company, 0) >= count:
        price = SHARE_PRICES[company] * count
        player["balance"] += price
        player["shares"][company] -= count
        save_player(player)
        update.message.reply_text(f"üìâ –ü—Ä–æ–¥–∞–Ω–æ {count} –∞–∫—Ü–∏–π {company} –∑–∞ ${price}")
    else:
        update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ü–∏–π")

def quest(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    player = get_player(user_id)
    
    if not player:
        return
    
    if player["quest_progress"] >= len(QUESTS):
        update.message.reply_text("üèÜ –í—Å–µ –∫–≤–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        return
    
    current_quest = QUESTS[player["quest_progress"]]
    status = "‚úÖ" if current_quest["condition"](player) else "‚ùå"
    
    update.message.reply_text(
        f"üéØ –¢–µ–∫—É—â–∏–π –∫–≤–µ—Å—Ç ({player['quest_progress'] + 1}/{len(QUESTS)}):\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {current_quest['name']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {current_quest['description']}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–ù–∞–≥—Ä–∞–¥–∞: ${current_quest['reward']}"
    )

def referral(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    player = get_player(user_id)
    
    if not player:
        return
    
    count = get_referral_count(user_id)
    update.message.reply_text(
        f"üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ $500 –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n"
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/CryptoTycoonBot?start={player['ref_code']}\n"
        f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {count}/3\n"
        f"–ù–∞–≥—Ä–∞–¥—ã: +{count * 500} CC"
    )

def graph(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    player = get_player(user_id)
    
    if len(context.args) != 1:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /graph [–∫–æ–º–ø–∞–Ω–∏—è]")
        return
    
    company = context.args[0]
    if company not in SHARE_PRICES:
        update.message.reply_text("‚ùå –ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏")
        return
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    update.message.reply_text(f"üìä –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –Ω–∞ {company} –∑–∞ –Ω–µ–¥–µ–ª—é")

# === –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def main():
    init_db()
    updater = Updater(os.getenv("TELEGRAM_BOT_TOKEN"), use_context=True)
    dp = updater.dispatcher

    # –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—ã
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("next_day", next_day))
    dp.add_handler(CommandHandler("info", info))
    dp.add_handler(CommandHandler("buy_rig", buy_rig))
    dp.add_handler(CommandHandler("buy_share", buy_share))
    dp.add_handler(CommandHandler("sell_share", sell_share))
    dp.add_handler(CommandHandler("quest", quest))
    dp.add_handler(CommandHandler("referral", referral))
    dp.add_handler(CommandHandler("graph", graph))

    updater.start_polling()
    updater.idle()
